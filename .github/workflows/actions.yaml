name: github Actions
on: push
jobs:

  # Builds sanity server docker container and pushes to ECR
  sanity-server-container-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
        uses: aws-actions/amazon-ecr-login@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: sanity_server
          IMAGE_TAG: 1.0.${{ github.run_number }}

      - name: building and pushing docker image
        if: github.ref == 'refs/heads/test'
        run: | 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.sanityserver .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: SSH to sanity studio server
        run: ssh ${{ secrets.SSH_HOST }}


  # Uses terraform to spin up sanity studio server instance
  terraform-sanity-server:
    if: github.ref != 'refs/heads/test' && github.ref != 'refs/heads/github_actions'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: check instance existance then terraform apply
        shell: bash
        working-directory: ./Terraform
        run: | 
          if aws ec2 describe-instances --filters "Name=tag:Name,Values=${{ steps.extract_branch.outputs.branch }}" | grep InstanceId
          then
            echo instance found, skipping terraform
          else
            echo "** Running Terraform Init**"
            terraform init

            echo "** Running Terraform Validate**"
            terraform validate

            echo "** Running Terraform Plan**"
            terraform plan

            echo "** Running Terraform Apply**"
            terraform apply -auto-approve -var="instance_name=${GITHUB_REF#refs/heads/}"
          fi